# Stage 1: Builder
FROM rust:1.86-slim-bookworm AS builder

# Install system dependencies for SQLx
RUN apt-get update && apt-get install -y --no-install-recommends \
    postgresql-client \
    libssl-dev \
    build-essential \
    pkg-config \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy the Cargo manifest
WORKDIR /usr/src/tdx-prover
COPY Cargo.toml Cargo.lock ./
COPY .env ./

# Copy the source code
COPY src ./src

# Copy SQLx metadata and migrations
COPY .sqlx .sqlx
COPY migrations migrations

# Build the project in release mode with SQLx offline mode
ENV SQLX_OFFLINE=true
RUN cargo build --release

# Stage 2: Final image
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    postgresql-client \
    libssl-dev \
    libpq5 \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copy the binary from the builder stage
COPY --from=builder /usr/src/tdx-prover/target/release/tdx-prover /usr/local/bin/

# Copy SQLx metadata and migrations
COPY --from=builder /usr/src/tdx-prover/.sqlx .sqlx
COPY --from=builder /usr/src/tdx-prover/migrations migrations
COPY --from=builder /usr/src/tdx-prover/.env ./.env

# Set environment variables
ENV RUST_LOG=info
ENV DATABASE_URL=postgres://postgres:postgres@localhost:5432/newton
ENV SQLX_OFFLINE=true

# Expose the port your application runs on
EXPOSE 8002

# Run the application
CMD ["tdx-prover"]

# # -------- Build Stage --------
# FROM rust:1.86 AS builder

# # Install required libraries for sqlx-postgres
# RUN apt-get update && apt-get install -y pkg-config libssl-dev libpq-dev

# # Enable SQLx offline mode and define dummy DB URL
# ENV SQLX_OFFLINE=true
# ENV DATABASE_URL=postgres://postgres:postgres@localhost:5432/newton

# WORKDIR /tdx-prover

# # Cache dependencies
# COPY Cargo.toml Cargo.lock ./
# RUN mkdir src && echo 'fn main() {}' > src/main.rs
# RUN cargo fetch
# RUN cargo build --release

# # Copy source and precompiled dependencies
# COPY . .

# # RUN cargo install sqlx-cli --no-default-features --features rustls,postgres
# # RUN cargo sqlx prepare --workspace

# # Build final binary
# RUN cargo build --release

# # -------- Runtime Stage --------
# FROM debian:bullseye-slim

# # Install minimal runtime dependencies
# RUN apt-get update && apt-get install -y libpq5 ca-certificates && rm -rf /var/lib/apt/lists/*

# WORKDIR /tdx-prover

# # Copy compiled binary from builder stage
# COPY --from=builder /tdx-prover/target/release/tdx-prover .

# # Set entrypoint
# CMD ["./tdx-prover"]

# FROM rust:1.86-slim-bullseye AS build

# # install dependencies
# RUN apt-get update && apt-get install -y \
#     build-essential \
#     pkg-config \
#     libssl-dev \
#     libpq-dev

# RUN USER=root cargo new --bin tdx-prover
# WORKDIR /tdx-prover

# # Copy Cargo files
# COPY ./Cargo.lock ./Cargo.lock
# COPY ./Cargo.toml ./Cargo.toml

# # cache dependencies
# RUN cargo build --release
# RUN rm -f src/*.rs

# # Copy source
# COPY ./src ./src

# # Copy migrations and sqlx
# COPY migrations ./migrations
# COPY .sqlx ./.sqlx

# # SQLx Offline Mode
# ENV SQLX_OFFLINE=true

# # build for release
# RUN rm -f ./target/release/dep/tdx-prover*
# RUN cargo build --release

# FROM debian:bullseye-slim

# # Install only minimal dependencies
# RUN apt-get update && apt-get install -y libpq5 ca-certificates && rm -rf /var/lib/apt/lists/*

# WORKDIR /tdx-prover
# COPY --from=build /tdx-prover/target/release/tdx-prover /usr/src/tdx-prover

# CMD ["/usr/src/tdx-prover"]
